#include<iostream>
using namespace std;
class System {
private:
    string s;
    System(string ss) { s = ss; }
public:
    static System& getInstance(string ss) {
        static System theInstance(ss);
        return theInstance;
    }
    void prn() {
        std::cout << s << " says this works!\n";
    }
};
int main() {
    System& sys1 = System::getInstance("sys1");
    sys1.prn();
    System& sys2 = System::getInstance("sys2"); //not created again
    sys2.prn();
    if (&sys1 == &sys2)
        cout << "Equal";
    else
        cout << "Not equal";
}







#include <iostream>
#include <string>
using namespace std;
class Shape {
public:
	virtual void Draw() = 0;
	static Shape* Create(string type);
};
class Circle : public Shape {
public:
	void Draw() { cout << "I am circle" << endl; }
	friend class Shape;
};
class Square : public Shape {
public:
	void Draw() { cout << "I am square" << endl; }
	friend class Shape;
};
Shape* Shape::Create(string type) {
	if (type == "circle") return new Circle();
	if (type == "square") return new Square();
	return NULL;
}
int main() {
	Shape* obj1 = Shape::Create("circle");
	Shape* obj2 = Shape::Create("square");
	obj1->Draw();
	obj2->Draw();
}






