#include<iostream>
using namespace std;
class System {
private:
    string s;
    System(string ss) { s = ss; }
public:
    static System& getInstance(string ss) {
        static System theInstance(ss);
        return theInstance;
    }
    void prn() {
        std::cout << s << " says this works!\n";
    }
};
int main() {
    System& sys1 = System::getInstance("sys1");
    sys1.prn();
    System& sys2 = System::getInstance("sys2"); //not created again
    sys2.prn();
    if (&sys1 == &sys2)
        cout << "Equal";
    else
        cout << "Not equal";
}







#include <iostream>
#include <string>
using namespace std;
class Shape {
public:
	virtual void Draw() = 0;
	static Shape* Create(string type);
};
class Circle : public Shape {
public:
	void Draw() { cout << "I am circle" << endl; }
	friend class Shape;
};
class Square : public Shape {
public:
	void Draw() { cout << "I am square" << endl; }
	friend class Shape;
};
Shape* Shape::Create(string type) {
	if (type == "circle") return new Circle();
	if (type == "square") return new Square();
	return NULL;
}
int main() {
	Shape* obj1 = Shape::Create("circle");
	Shape* obj2 = Shape::Create("square");
	obj1->Draw();
	obj2->Draw();
}




#include <iostream>	
#include <string>	
using namespace std;
class Device {
public:
	virtual void send(string data) = 0;
};
class Wifi : public Device {
public:
	void send(string data) {
		cout << "Sent By Wifi: " << data << endl;
	}
};
class Bluetooth : public Device {
public:
	void send(string data) {
		cout << "Sent By Bluetooth: " << data << endl;
	}
};
// Problem: Multiple if every function for handle the environment
// Solution: Build Abstract Factory and get method
class AbstractFactory {
public:
	virtual Device* get(int) = 0;
};
class DeviceAbstractFactory : public AbstractFactory {
public:
	Device* get(int x) {
		if (x == 1) { return new Wifi; }
		else { return new Bluetooth; }
	}
};
int main() {
	AbstractFactory* abstractFactory = new DeviceAbstractFactory;
	Device* device;		device = abstractFactory->get(2);
	device->send("Abstract Factory Design Pattern Worked.");
}




