#include <iostream>
#include <thread>

int main() {
    unsigned int n = std::thread::hardware_concurrency();
    if (n == 0) {
        std::cout << "Number of concurrent threads not detectable.\n";
    } else {
        std::cout << "System supports " << n << " concurrent threads.\n";
    }
    return 0;
}





#include <iostream>
#include <thread>

// A simple function for a thread
void workerFunction(int id) {
    std::cout << "Worker " << id << " is running on thread ID " 
              << std::this_thread::get_id() << "\n";
}

int main() {
    std::thread t1(workerFunction, 1);  // Start a thread
    std::thread t2(workerFunction, 2);  // Start another

    t1.join();  // Wait for t1 to finish
    t2.join();  // Wait for t2 to finish

    return 0;
}


#include <iostream>
#include <thread>
#include <vector>
#include <chrono>
#include <mutex>

std::mutex coutMutex;

void doWork(int id, int duration) {
    {
        std::lock_guard<std::mutex> lock(coutMutex);
        std::cout << "Thread " << id << " starting on ID " 
                  << std::this_thread::get_id() << "\n";
    }

    std::this_thread::sleep_for(std::chrono::milliseconds(duration));

    {
        std::lock_guard<std::mutex> lock(coutMutex);
        std::cout << "Thread " << id << " finished work.\n";
    }
}

int main() {
    std::cout << "Hardware threads available: " 
              << std::thread::hardware_concurrency() << "\n";

    std::vector<std::thread> workers;
    for (int i = 0; i < 5; ++i) {
        workers.emplace_back(doWork, i, 500 + i * 100);
    }

    for (auto& t : workers) {
        if (t.joinable()) {
            t.join();
        }
    }

    std::cout << "All threads finished.\n";
    return 0;
}



