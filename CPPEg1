#include <iostream>
using namespace std;

int main() {
   cout << "Size of char : " << sizeof(char) << endl;
   cout << "Size of int : " << sizeof(int) << endl;
   cout << "Size of short int : " << sizeof(short int) << endl;
   cout << "Size of long int : " << sizeof(long int) << endl;
   cout << "Size of float : " << sizeof(float) << endl;
   cout << "Size of double : " << sizeof(double) << endl;
   cout << "Size of wchar_t : " << sizeof(wchar_t) << endl;
   
   return 0;
}




Write a program in C++ to check the upper and lower limits of integer.
Use header file climits



#include <iostream>
#include <climits>   // integer limits in header file
using namespace std;

int main()
{
    cout << "\n\n Check the upper and lower limits of integer :\n";
    cout << "--------------------------------------------------\n";
    cout << " The maximum limit of int data type :                  " << INT_MAX << endl;
    cout << " The minimum limit of int data type :                  " << INT_MIN << endl;
    cout << " The maximum limit of unsigned int data type :         " << UINT_MAX << endl;
    cout << " The maximum limit of long long data type :            " << LLONG_MAX << endl;
    cout << " The minimum limit of long long data type :             " << LLONG_MIN << endl;
    cout << " The maximum limit of unsigned long long data type :   " << ULLONG_MAX << endl;
    cout << " The Bits contain in char data type :                  " << CHAR_BIT << endl;
    cout << " The maximum limit of char data type :                 " << CHAR_MAX << endl;
    cout << " The minimum limit of char data type :                 " << CHAR_MIN << endl;
    cout << " The maximum limit of signed char data type :          " << SCHAR_MAX << endl;
    cout << " The minimum limit of signed char data type :          " << SCHAR_MIN << endl;
    cout << " The maximum limit of unsigned char data type :        " << UCHAR_MAX << endl;
    cout << " The minimum limit of short data type :                " << SHRT_MIN << endl;
    cout << " The maximum limit of short data type :                " << SHRT_MAX << endl;
    cout << " The maximum limit of unsigned short data type :       " << USHRT_MAX << endl;
   cout << endl;
   return 0;
}




#include <iostream>
using namespace std;
main() {
   unsigned int a = 60;	  // 60 = 0011 1100
   unsigned int b = 13;	  // 13 = 0000 1101
   int c = 0;
   c = a & b;             // 12 = 0000 1100
   cout << "Line 1 - Value of c is : " << c << endl ;
   c = a | b;             // 61 = 0011 1101
   cout << "Line 2 - Value of c is: " << c << endl ;
   c = a ^ b;             // 49 = 0011 0001
   cout << "Line 3 - Value of c is: " << c << endl ;
   c = ~a;                // -61 = 1100 0011
   cout << "Line 4 - Value of c is: " << c << endl ;
   c = a << 2;            // 240 = 1111 0000
   cout << "Line 5 - Value of c is: " << c << endl ;
   c = a >> 2;            // 15 = 0000 1111
   cout << "Line 6 - Value of c is: " << c << endl ;
   return 0;
}







#include <iostream>
using namespace std;
int main () {
   int  var;
   int  *ptr;
   int  val;
   var = 3000;
   // take the address of var
   ptr = &var;
   // take the value available at ptr
   val = *ptr;
   cout << "Value of var :" << var << endl;
   cout << "Value of ptr :" << ptr << endl;
   cout << "Value of val :" << val << endl;
   return 0;
}





#include <iostream>
using namespace std;
int main () {
       int num;
       cout<<"Enter a number to check grade:";
       cin>>num;
            if (num <0 || num >100)
                cout<<"wrong number";
            else if(num >= 0 && num < 50)
                cout<<"Fail";
            else if (num >= 50 && num < 60)
                cout<<"D Grade";
            else if (num >= 60 && num < 70)
                cout<<"C Grade";
            else if (num >= 70 && num < 80)
                cout<<"B Grade";
            else if (num >= 80 && num < 90)
                cout<<"A Grade";
            else if (num >= 90 && num <= 100)
                cout<<"A+ Grade";
            cout<<endl;
    }




#include <iostream>
using namespace std;
int main () {
   char grade = 'D';
   cout<<"Enter grade in Capital Alphabet:";
   cin>>grade;
   switch(grade) {
      case 'A' :
         cout << "Excellent!" << endl;
         break;
      case 'B' :
      case 'C' :
         cout << "Well done" << endl;
         break;
      case 'D' :
         cout << "You passed" << endl;
         break;
      case 'F' :
         cout << "Better try again" << endl;
         break;
      default :
         cout << "Invalid grade" << endl;
   }
   cout << "Your grade is " << grade << endl;
   return 0;
}








#include <iostream>
using namespace std;
int main()
{
ineligible:
      cout<<"You are not eligible to vote!\n";
      cout<<"Enter your age:\n";
      int age;
      cin>>age;
      if (age < 18){
              goto ineligible;
      }
      else
      {
              cout<<"You are eligible to vote!";
      }
}




#include <iostream>
using namespace std;
int main()
{
  int n, i, m=0, flag=0;
  cout << "Enter the Number to check Prime: ";
  cin >> n;
  m=n/2;
  for(i = 2; i <= m; i++)
  {
      if(n % i == 0)
      {
          cout<<"Number is not Prime."<<endl;
          flag=1;
          break;
      }
  }
  if (flag==0)
      cout << "Number is Prime."<<endl;
  return 0;
}






#include <iostream>
using namespace std;
int main()
{
  int n, i, m=0, flag=0;
  cout << "Enter the Number to check Prime: ";
  cin >> n;
  m=n/2;
  i=2;
  while(i <= m)
  {
      if(n % i == 0)
      {
          cout<<"Number is not Prime."<<endl;
          flag=1;
          break;
      }
      i++;
  }
  if (flag==0)
      cout << "Number is Prime."<<endl;
  return 0;
}






#include <iostream>
using namespace std;
int main()
{
  int n, i, m=0, flag=0;
  cout << "Enter the Number to check Prime: ";
  cin >> n;
  m=n/2;
  i=2;
  do
  {
      if(n % i == 0)
      {
          cout<<"Number is not Prime."<<endl;
          flag=1;
          break;
      }
      i++;
  }while(i <= m);
  if (flag==0)
      cout << "Number is Prime."<<endl;
  return 0;
}






#include <iostream>
using namespace std;

int main () {
   // Local variable declaration:
   int a = 10;

   // do loop execution
   do {
      if( a == 15) {
         // skip the iteration.
         a = a + 1;
         continue;
      }
      cout << "value of a: " << a << endl;
      a = a + 1;
   }
   while( a < 20 );

   return 0;
}







A loop becomes an infinite loop if a condition never becomes false
You can terminate an infinite loop by pressing Ctrl + C keys
#include <stdio.h>
int main () {
for( ; ; ) {
printf("This loop will run forever.\n");
}
/*while(true) {
printf("This loop will run forever.\n");
}
do
{
printf("This loop will run forever.\n");
} while(true);  */

return 0;
}









#include <iostream>
using namespace std;
int max(int num1, int num2); /* function declaration */
int main () {
int a = 100, b = 200, ret; /* local variable definition */
ret = max(a, b); /* calling a function to get max value */
cout<< "Max value is : "<< ret<<endl; //o/p: Max value is : 200
return 0;
}
/* function returning the max between two numbers */
int max(int num1, int num2) {
int result; /* local variable declaration */
if (num1 > num2)
result = num1;
else
result = num2;
return result;
}






#include <iostream>
using namespace std; 
int sum(int a, int b = 20) {
   int result;
   result = a + b;
   return (result);
}
int main () {
   int a = 100;
   int b = 200;
   int result;
 
   // calling a function to add the values.
   result = sum(a, b);
   cout << "Total value is :" << result << endl;

   // calling a function again as follows.
   result = sum(a);
   cout << "Total value is :" << result << endl;
 
   return 0;
}






#include <iostream>
using namespace std;
int main()
{
 int arr[5]={10, 0, 20, 0, 30}; //creating and initializing array
        //traversing array
       for (int i: arr)        {
            cout<<i<<"\n";
        }
      /* for(int j=0;j<arr.size();j++) {
 		i=arr[j];
 		cout<<i<<"\n";
 	}  */

}








#include <iostream>
#include <string>
using namespace std;
int main() {
string str1 = "Hello";
string str2 = "World";
string str3;
int  len;
// copy str1 into str3
str3 = str1;
cout << "str3 : " << str3 << endl;
// concatenates str1 and str2
str3 = str1 + str2;
cout << "str3 = str1 + str2 : " << str3 << endl;
// total length of str3 after concatenation
len = str3.size();
cout << "str3.size() :  " << len << endl;
return 0;
}





The C++ standard library does not provide a proper date type. C++ inherits the structs and functions for date and time manipulation from C. 
There are four time-related types: clock_t, time_t, size_t, and tm.
Functions:
time_t time(time_t *time);
This returns the current calendar time of the system in number of seconds elapsed since January 1, 1970. If the system has no time, .1 is returned.
char *ctime(const time_t *time);
This returns a pointer to a string of the form day month year hours:minutes:seconds year\n\0.
struct tm *localtime(const time_t *time);
This returns a pointer to the tm structure representing local time.
clock_t clock(void);
This returns a value that approximates the amount of time the calling program has been running. A value of .1 is returned if the time is not available.
char * asctime ( const struct tm * time );
This returns a pointer to a string that contains the information stored in the structure pointed to by time converted into the form: day month date hours:minutes:seconds year\n\0
struct tm *gmtime(const time_t *time);
This returns a pointer to the time in the form of a tm structure. The time is represented in Coordinated Universal Time (UTC), which is essentially Greenwich Mean Time (GMT).
time_t mktime(struct tm *time);
This returns the calendar-time equivalent of the time found in the structure pointed to by time.
double difftime ( time_t time2, time_t time1 );
This function calculates the difference in seconds between time1 and time2.
size_t strftime();
This function can be used to format date and time in a specific format.







#include <iostream>
#include <ctime>
using namespace std;

int main() {
    // current date/time based on current system
    time_t now = time(0);

    // Convert now to string form (local time)
    char dt[26]; // ctime_s requires a buffer of at least 26 bytes
    ctime_s(dt, sizeof(dt), &now);
    cout << "The local date and time is: " << dt;

    // Convert to tm struct for UTC
    tm gmtm;
    gmtime_s(&gmtm, &now);

    char utc[26];
    asctime_s(utc, sizeof(utc), &gmtm);
    cout << "The UTC date and time is: " << utc;

    return 0;
}






The <chrono> header introduces a powerful, type-safe way to deal with durations, clocks, and time points.
Common Clocks
system_clock: Wall-clock time (can be converted to time_t).
steady_clock: Monotonic clock (never goes backward).
high_resolution_clock: Alias to the most precise clock (may be system or steady).








Types Introduced:
std::chrono::year
std::chrono::month
std::chrono::day
std::chrono::weekday
std::chrono::year_month_day
All support arithmetic, comparisons, and construction with / operator.
zoned_time requires a time zone database (usually part of your stdlib implementation like libc++ or MSVC STL with support enabled).





#include <iostream>
#include <chrono>
#include <format>      // For std::format (C++20)
#include <thread>      // For std::this_thread::sleep_for
using namespace std;
using namespace std::chrono;

int main() {
    // 1. Measure execution time
    auto start = high_resolution_clock::now();

    this_thread::sleep_for(milliseconds(1234)); // simulate work

    auto end = high_resolution_clock::now();
    auto elapsed = duration_cast<milliseconds>(end - start);
    cout << "Elapsed time: " << elapsed.count() << " ms\n\n";

    // 2. Use chrono literals
    auto duration1 = 2h + 30min + 15s;
    cout << "Duration1 in seconds: " << duration_cast<seconds>(duration1).count() << " seconds\n\n";

    // 3. Get current system time and convert to time_t (legacy interop)
    auto now = system_clock::now();
    time_t legacy_time = system_clock::to_time_t(now);

    // Safe replacement for ctime()
    char buffer[26];
    ctime_s(buffer, sizeof(buffer), &legacy_time);
    cout << "Legacy time (ctime): " << buffer << endl;

    // 4. Calendar types (C++20)
    auto today = floor<days>(system_clock::now());
    year_month_day ymd = year_month_day{ today };

    cout << "Today (calendar): "
        << static_cast<int>(ymd.year()) << "-"
        << static_cast<unsigned>(ymd.month()) << "-"
        << static_cast<unsigned>(ymd.day()) << "\n\n";

    // 5. Custom date
    year_month_day birthday = 1995y / October / 12d;
    cout << "Birthday (raw): "
        << static_cast<int>(birthday.year()) << "-"
        << static_cast<unsigned>(birthday.month()) << "-"
        << static_cast<unsigned>(birthday.day()) << "\n\n";

    // 6. Weekday and arithmetic
    weekday wd = weekday{ today };
    cout << "Today is: " << wd.c_encoding() << " (0 = Sunday, 1 = Monday...)\n\n";

    // 7. Formatting date/time (C++20)
    cout << format("Formatted now: {:%Y-%m-%d %H:%M:%S}\n\n", floor<seconds>(now));

    // 8. Time zone aware time (C++20)
    try {
        zoned_time localTime{ current_zone(), system_clock::now() };
        cout << format("Local time with zone: {:%Y-%m-%d %H:%M:%S %Z}\n\n", localTime);

        zoned_time utcTime{ "UTC", system_clock::now() };
        cout << format("UTC time: {:%Y-%m-%d %H:%M:%S %Z}\n\n", utcTime);
    }
    catch (const std::exception& ex) {
        cout << "Time zone error: " << ex.what() << endl;
    }

    // 9. Custom duration
    duration<int, ratio<90 * 60>> match_duration(1); // 90 minutes
    cout << "Match duration in seconds: " << duration_cast<seconds>(match_duration).count() << " sec\n";

    return 0;
}






#include <iostream> 
using namespace std;
 
class Shape {
   protected:
      int width, height;
      
   public:
      Shape( int a = 0, int b = 0){
         width = a;
         height = b;
      }
      int area() {
         cout << "Parent class area :" <<endl;
         return 0;
      }
};
class Rectangle: public Shape {
   public:
      Rectangle( int a = 0, int b = 0):Shape(a, b) { }
      
      int area () { 
         cout << "Rectangle class area :" <<endl;
         return (width * height); 
      }
};

class Triangle: public Shape {
   public:
      Triangle( int a = 0, int b = 0):Shape(a, b) { }
      
      int area () { 
         cout << "Triangle class area :" <<endl;
         return (width * height / 2); 
      }
};

// Main function for the program
int main() {
   Shape *shape;
   Rectangle rec(10,7);
   Triangle  tri(10,5);

   // store the address of Rectangle
   shape = &rec;
   
   // call rectangle area.
   cout<<shape->area()<<endl;

   // store the address of Triangle
   shape = &tri;
   
   // call triangle area.
   cout<<shape->area()<<endl;
   
   return 0;
}







Virtual function: 

class Shape {
   protected:
      int width, height;
      
   public:
      Shape( int a = 0, int b = 0) {
         width = a;
         height = b;
      }
      virtual int area() {
         cout << "Parent class area :" <<endl;
         return 0;
      }
};



Example: pure virtual function:

class Shape {
   protected:
      int width, height;

   public:
      Shape(int a = 0, int b = 0) {
         width = a;
         height = b;
      }
      
      // pure virtual function
      virtual int area() = 0;  //NULL in C++ is 0 : \0
};



























