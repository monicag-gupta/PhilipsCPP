Containers or container classes store objects and data. There are in total seven standard “first-class” container classes  and three container adaptor classes and only seven header files that provide access to these containers or container adaptors.
Sequence Containers:  implement data structures which can be accessed in a sequential manner.
vector
list
deque
arrays
forward_list( Introduced in C++11)
Container Adaptors :  provide a different interface for sequential containers.
queue
priority_queue
stack
Associative Containers :  implement sorted data structures that can be quickly searched (O(log n) complexity).
set
multiset
map
multimap






STL containers are implemented as template classes. 
Sequence containers: are ordered collections in which each element has a certain position. Also known as sequential containers.
Predefined sequential containers in STL: vector, list, deque
Associative containers: are sorted collections in which the actual position of an element depends on its value due to a certain sorting criterion
Predefined associative containers in STL: set, map, multiset, multimap
Container Adapters: meet special needs
Predefined container adapters in STL: stack, queue, priority queue
Miscellaneous Containers : bitset, pair, valarray




Vector:

#include<iostream>
#include <vector>
using namespace std;
int main() {
    vector <int> vNums;
    int i;
    for (i=1; i<=5; ++i )
        vNums.push_back(i); //append elements
    for (i=0; i< vNums.size(); i++ )
        cout << vNums[ i ] << ' ';
    cout<<endl;
    vNums.erase(vNums.begin() );//remove first element
   cout<<endl;
    vNums.pop_back();//remove last element
   for (i = 0; i< vNums.size(); i++)
        cout << vNums[ i ] << ' ';
   cout<<endl;
   return 0;
}





STL – Containers : Deque

#include <iostream>
#include <deque>
using namespace std;
int main(int argc, char ** argv){
    deque <int> deNums;
    int i;
    for (i = 1; i<=5; ++i )
        deNums.push_back(i); // append elements
    for (i = 2; i <= 5; i++)
        deNums.push_front(i); // insert at front
    for (i = 0; i < deNums.size(); i++)
        cout << deNums[i] << ' ';
    cout<<endl;
    return 0;
}



STL – Containers : List

begin( ): It returns an iterator pointing to the first element in list.Its time complexity is O(1). 
end( ): It returns an iterator referring to the theoretical element(doesn’t point to an element) which follows the last element.Its time complexity is O(1). 
empty( ): It returns whether the list is empty or not.It returns 1 if the list is empty otherwise returns 0.Its time complexity is O(1). 
assign( ): It assigns new elements to the list by replacing its current elements and change its size accordingly.It time complexity is O(N).
back( ): It returns reference to the last element in the list.Its time complexity is O(1). 
erase( ): It removes a single element or the range of element from the list.Its time complexity is O(N). 
front( ): It returns reference to the first element in the list.Its time complexity is O(1). 
push_back( ): It adds a new element at the end of the list, after its current last element. Its time complexity is O(1). 
push_front( ): It adds a new element at the beginning of the list, before its current first element. Its time complexity is O(1). 
remove( ): It removes all the elements from the list, which are equal to given element. Its time complexity is O(N). 
pop_back( ): It removes the last element of the list, thus reducing its size by 1. Its time complexity is O(1). 
pop_front( ): It removes the first element of the list, thus reducing its size by 1. Its time complexity is O(1). 
insert( ): It insert new elements in the list before the element on the specified position. Its time complexity is O(N). 
reverse ( ): It reverses the order of elements in the list. Its time complexity is O(N). 
size( ): It returns the number of elements in the list. Its time complexity is O(1).



#include <iostream>
#include <list>
using namespace std;
void PrintList(list<int> nums) {
    while(!nums.empty()) {
        cout << nums.front() << ' '; // display 1st element
        nums.pop_front(); }// remove 1st element
    cout << endl;
}
int main(int argc, char ** argv){
    list<int> nums;
    for (int i=1; i<=5; ++i)
        nums.push_back(i);
    PrintList(nums); // 1 2 3 4 5
    nums.reverse(); PrintList(nums); // 5 4 3 2 1
    nums.sort(); PrintList(nums); // 1 2 3 4 5
    return 0;
}










